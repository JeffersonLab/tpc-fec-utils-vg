#include <iostream>
#include <iomanip>
#include <librorc.h>
#include "trorc_registers.h"
#include "trorc.hpp"

#define HEXSTR(x, width) "0x" << std::setw(width) << std::setfill('0') << std::hex \
                              << x << std::setfill(' ') << std::dec
#define REG_ENTRY(region, ofs, reg) {region, ofs, reg, #reg}

using namespace trorc;

struct reg {
  const char *region;
  uint32_t ofs;
  uint32_t addr;
  const char *name;
};

struct reg regs_sysmon[] = {
  REG_ENTRY("SYSMON", 0, TRORC_REG_FIRMWARE_REVISION),
  REG_ENTRY("SYSMON", 0, TRORC_REG_FIRMWARE_DATE),
  REG_ENTRY("SYSMON", 0, TRORC_REG_FPGA_TEMPERATURE),
  REG_ENTRY("SYSMON", 0, TRORC_REG_FPGA_VCCINT),
  REG_ENTRY("SYSMON", 0, TRORC_REG_FPGA_VCCAUX),
  REG_ENTRY("SYSMON", 0, TRORC_REG_SC_REQ_CANCELED),
  REG_ENTRY("SYSMON", 0, TRORC_REG_QSFP_LED_CTRL),
  REG_ENTRY("SYSMON", 0, TRORC_REG_UPTIME),
  REG_ENTRY("SYSMON", 0, TRORC_REG_FPGA_ID_LOW),
  REG_ENTRY("SYSMON", 0, TRORC_REG_FPGA_ID_HIGH),
  REG_ENTRY("SYSMON", 0, TRORC_REG_DMA_TX_TIMEOUT),
  REG_ENTRY("SYSMON", 0, TRORC_REG_I2C_CONFIG),
  REG_ENTRY("SYSMON", 0, TRORC_REG_I2C_OPERATION),
  REG_ENTRY("SYSMON", 0, TRORC_REG_ILLEGAL_REQ),
  REG_ENTRY("SYSMON", 0, TRORC_REG_MULTIDWREAD),
  REG_ENTRY("SYSMON", 0, TRORC_REG_PCIE_CTRL),
  REG_ENTRY("SYSMON", 0, TRORC_REG_TYPE_CHANNELS),
  REG_ENTRY("SYSMON", 0, TRORC_REG_PCIE_DST_BUSY),
  REG_ENTRY("SYSMON", 0, TRORC_REG_BRACKET_LED_CTRL),
  REG_ENTRY("SYSMON", 0, TRORC_REG_FAN_CTRL),
  REG_ENTRY("SYSMON", 0, TRORC_REG_PCIE_TERR_DROP),
  REG_ENTRY("SYSMON", 0, TRORC_REG_UC_SPI_DATA),
  REG_ENTRY("SYSMON", 0, TRORC_REG_UC_SPI_CTRL),
  REG_ENTRY("SYSMON", 0, TRORC_REG_PCIE_DST_MAX_BUSY),
  REG_ENTRY("SYSMON", 0, TRORC_REG_REFCLK_FREQ),
  REG_ENTRY("SYSMON", 0, TRORC_REG_FIRMWARE_BUILD_DATE),
  REG_ENTRY("SYSMON", 0, TRORC_REG_FIRMWARE_BUILD_TIME),
  REG_ENTRY("SYSMON", 0, TRORC_REG_DDR3_CTRL),
  REG_ENTRY("SYSMON", 0, TRORC_REG_DDR3_C0_TESTER_RDCNT),
  REG_ENTRY("SYSMON", 0, TRORC_REG_DDR3_C0_TESTER_WRCNT),
  REG_ENTRY("SYSMON", 0, TRORC_REG_DDR3_C1_TESTER_RDCNT),
  REG_ENTRY("SYSMON", 0, TRORC_REG_DDR3_C1_TESTER_WRCNT),
  REG_ENTRY("SYSMON", 0, TRORC_REG_DDR3_MODULE),
  REG_ENTRY("SYSMON", 0, TRORC_REG_LVDS_CTRL),
  REG_ENTRY("SYSMON", 0, TRORC_REG_FMC_CTRL_LOW),
  REG_ENTRY("SYSMON", 0, TRORC_REG_FMC_CTRL_MID),
  REG_ENTRY("SYSMON", 0, TRORC_REG_FMC_CTRL_HIGH),
  REG_ENTRY("SYSMON", 0, TRORC_REG_DATA_REPLAY_CTRL),
  REG_ENTRY("SYSMON", 0, TRORC_REG_DATA_REPLAY_PAYLOAD_BASE)
};

struct reg regs_link[] = {
  //--
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_EBDM_N_SG_CONFIG),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_EBDM_BUFFER_SIZE_L),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_EBDM_BUFFER_SIZE_H),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_RBDM_N_SG_CONFIG),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_RBDM_BUFFER_SIZE_L),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_RBDM_BUFFER_SIZE_H),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_EBDM_SW_READ_POINTER_L),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_EBDM_SW_READ_POINTER_H),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_RBDM_SW_READ_POINTER_L),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_RBDM_SW_READ_POINTER_H),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_DMA_CTRL),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_DMA_N_EVENTS_PROCESSED),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_EBDM_FPGA_WRITE_POINTER_H),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_EBDM_FPGA_WRITE_POINTER_L),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_RBDM_FPGA_WRITE_POINTER_L),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_RBDM_FPGA_WRITE_POINTER_H),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_SGENTRY_ADDR_LOW),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_SGENTRY_ADDR_HIGH),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_SGENTRY_LEN),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_SGENTRY_CTRL),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_DMA_STALL_CNT),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GTX_ASYNC_CFG),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_DMA_ELFIFO),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_DMA_PKT_SIZE),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GTX_DRP_CTRL),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBT_ASYNC_CTRL),
  REG_ENTRY("DMA",   (0 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_DMA_RATE_LIMITER_WAITTIME),
  //--
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_CTRL),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_FRM_COUNT),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_READY_LOST_COUNT),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_PATTERN_CHECKER_ERROR_COUNT),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_EVENT_SIZE_FRAMES),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_TARGET_FRAME_COUNT),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_TRIGGER_COUNT),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_SCA_VERSION),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_SCA_CTRL),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_SCA_PAYLOAD_LOW),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_SCA_PAYLOAD_HIGH),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_SCA_CRC),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_SCA_SW_CTRL),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_SCA_SW_DATA_0),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_SCA_SW_DATA_1),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_SCA_SW_DATA_2),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_SCA_SW_DATA_3),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_SCA_SW_DATA_4),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_SCA_SW_DATA_5),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_SCA_SW_DATA_6),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_SCA_SW_DATA_7),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_DEC_ADCCLOCK_FOUND),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_DEC_ADCCLOCK_0_ERROR_COUNT),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_DEC_ADCCLOCK_1_ERROR_COUNT),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_DEC_ADCCLOCK_2_ERROR_COUNT),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_DEC_SYNCPATTERN_STS),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_DEC_SYNCPATTERN_0_ERROR_COUNT),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_DEC_SYNCPATTERN_1_ERROR_COUNT),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_DEC_SYNCPATTERN_2_ERROR_COUNT),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_DEC_SYNCPATTERN_3_ERROR_COUNT),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_DEC_SYNCPATTERN_4_ERROR_COUNT),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_DEC_ID_0_ERROR_COUNT),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_DEC_ID_1_ERROR_COUNT),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_DEC_CTRL),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_RX_DATA_0),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_RX_DATA_1),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_RX_DATA_2),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_RX_DATA_3),
  REG_ENTRY("GBTRX", (1 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTRX_RX_DATA_RED),

  //--
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_CTRL),
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_IDLEPATTERN_LOW),
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_IDLEPATTERN_MID),
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_IDLEPATTERN_HIGH),
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_CONTROLPATTERN_LOW),
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_CONTROLPATTERN_MID),
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_CONTROLPATTERN_HIGH),
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_CONTROLPATTERN_CYCLES),
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_SCA_CTRL),
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_SCA_PAYLOAD_LOW),
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_SCA_PAYLOAD_HIGH),
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_SCA_SW_CTRL),
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_SCA_SW_DATA_0),
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_SCA_SW_DATA_1),
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_SCA_SW_DATA_2),
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_SCA_SW_DATA_3),
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_SCA_SW_DATA_4),
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_SCA_SW_DATA_5),
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_SCA_SW_DATA_6),
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_SCA_SW_DATA_7),
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_CONTROLPATTERN_START_COUNT),
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_DFT_CONFIG),
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_DFT_TX_DATA),
  REG_ENTRY("GBTTX", (2 << TRORC_REGFILE_GTXRX_SEL), TRORC_REG_GBTTX_DFT_VALMASK)
};

int main()
{
  int device_number(0);
  int bar_number(1);
  std::unique_ptr<Device> trorc;
  std::unique_ptr<Bar> bar;
  librorc::sysmon *sm = NULL;

  try {
    trorc.reset(new Device(device_number));
    bar.reset(new Bar(*trorc, bar_number));
    sm = new librorc::sysmon(bar->get());
  } catch (int e) {
    std::cerr << "ERROR: Failed to initialize T-RORC: " << librorc::errMsg(e)
              << std::endl;
    exit(1);
  }

  uint32_t nChannels = sm->numberOfChannels();

  /** Print system monitor registers */
  std::cout << "--- SYSTEM MONITOR ---------------------------------------------------\n";
  for (size_t i = 0; i < sizeof(regs_sysmon) / sizeof(reg); i++) {
    std::cout << "[" << std::setw(8) << regs_sysmon[i].region << " " << std::setw(2)
              << std::right << regs_sysmon[i].addr << "] " << std::setw(44) << std::setfill('.')
              << std::left << regs_sysmon[i].name << ": " << std::right
              << HEXSTR(bar->read(regs_sysmon[i].addr), 8) << std::endl;
  }

  /** Print link-specific registers */
  for (size_t channel = 0; channel < nChannels; channel++) {
    librorc::link link(bar->get(), channel);
    std::cout << "\n--- CHANNEL " << channel
              << " [0x" << std::hex << std::setfill('0') << std::setw(5) << link.base() << std::dec << std::setfill(' ') << "]"
              << " ---------------------------------------------------\n";
    for (size_t i = 0; i < sizeof(regs_link) / sizeof(reg); i++) {
      std::cout << "[" << HEXSTR(link.base() + regs_link[i].ofs + regs_link[i].addr, 5) << "]  "
                << "[" << std::setw(8) << regs_link[i].region << channel << " " << std::setw(2)
                << std::right << regs_link[i].addr << "] " << std::setw(48) << std::setfill('.')
                << std::left << regs_link[i].name << ": " << std::right
                << HEXSTR(bar->read(link.base() + regs_link[i].ofs + regs_link[i].addr), 8) << std::endl;
    }
  }

  delete sm;
  return 0;
}
